---
title: "class07"
author: "Jo Bautista - A10684919"
format: html
---

```{r}
url <- "https://tinyurl.com/UK-foods"
x <- read.csv(url)


#Q1. How many rows and columns are in your new data frame named x? What R functions could you use to answer this questions?

#give dimensions --> number of rows, number of columns
dim(x)

#preview first six row
head(x)

#reset first column to be name of rows instead of included as a column
rownames(x) <- x[,1]
x <- x[,-1]
head(x)

#Q2. Which approach to solving the ‘row-names problem’ mentioned above do you prefer and why? Is one approach more robust than another under certain circumstances?

#A2. I prefer the second option (read.csv(url, row.names=1)) because it is more robust in that it can manage row names at the initial  data import.  This reduces steps in workflow. 

#check dimensions again (number of rows, number of columns)
dim(x)

#another way of avoiding rownames as first column
x <- read.csv(url, row.names=1)
head(x)


#barplot of x with bars displayed side by side
barplot(as.matrix(x), beside=T, col=rainbow(nrow(x)))

#Q3: Changing what optional argument in the above barplot() function results in the following plot?

#A3. Change beside=T to beside=F.  

#barplot of x with bars displayed stacked
barplot(as.matrix(x), beside=F, col=rainbow(nrow(x)))




#Q5: Generating all pairwise plots may help somewhat. Can you make sense of the following code and resulting figure? What does it mean if a given point lies on the diagonal for a given plot?

#A5: The diagonal shows the distribution of each variable (like a histogram). 

pairs(x, col=rainbow(10), pch=16)

# Use the prcomp() PCA function 
pca <- prcomp(t(x))
summary(pca)

#Q7. Complete the code below to generate a plot of PC1 vs PC2. The second line adds text labels over the data points.


# Plot PC1 vs PC2
plot(pca$x[, 1], pca$x[, 2], xlab="PC1", ylab="PC2", xlim=c(-270, 500))
text(pca$x[, 1], pca$x[, 2], colnames(x))


#Q8. Customize your plot so that the colors of the country names match the colors in our UK and Ireland map and table at start of this document.

countries <- colnames(x)  
colors <- ifelse(countries == "Wales", "red",
                 ifelse(countries == "England", "orange",
                        ifelse(countries == "Scotland", "blue",
                               ifelse(countries == "N. Ireland", "green", "green"))))

plot(pca$x[, 1], pca$x[, 2], xlab="PC1", ylab="PC2", xlim=c(-270, 500), col=colors)
text(pca$x[, 1], pca$x[, 2], countries, col=colors)

v <- round( pca$sdev^2/sum(pca$sdev^2) * 100 )
v

## second row
z <- summary(pca)
z$importance


barplot(v, xlab="Principal Component", ylab="Percent Variation")


##  PC1 -  accounts for > 90% of variance 
par(mar=c(10, 3, 0.35, 0))
barplot( pca$rotation[,1], las=2 )

library(ggplot2)

df <- as.data.frame(pca$x)
df_lab <- tibble::rownames_to_column(df, "Country")

# first_plot
ggplot(df_lab) + 
  aes(PC1, PC2, col=Country) + 
  geom_point()


ggplot(df_lab) + 
  aes(PC1, PC2, col=Country, label=Country) + 
  geom_hline(yintercept = 0, col="gray") +
  geom_vline(xintercept = 0, col="gray") +
  geom_point(show.legend = FALSE) +
  geom_label(hjust=1, nudge_x = -10, show.legend = FALSE) +
  expand_limits(x = c(-300,500)) +
  xlab("PC1 (67.4%)") +
  ylab("PC2 (28%)") +
  theme_bw()



ld <- as.data.frame(pca$rotation)
ld_lab <- tibble::rownames_to_column(ld, "Food")

ggplot(ld_lab) +
  aes(PC1, Food) +
  geom_col() 



#add color
ggplot(ld_lab) +
  aes(PC1, reorder(Food, PC1), bg=PC1) +
  geom_col() + 
  xlab("PC1 Loadings/Contributions") +
  ylab("Food Group") +
  scale_fill_gradient2(low="purple", mid="gray", high="darkgreen", guide=NULL) +
  theme_bw()



## biplot() - small datasets 
biplot(pca)




url2 <- "https://tinyurl.com/expression-CSV"
rna.data <- read.csv(url2, row.names=1)
head(rna.data)

#Q10: How many genes and samples are in this data set?

#A10: 100 genes, 10 samples.

str(rna.data)


## Take the transpose of our data 
pca <- prcomp(t(rna.data), scale=TRUE)
 
## Simple plot of pc1 and pc2
plot(pca$x[,1], pca$x[,2], xlab="PC1", ylab="PC2")

#summary
summary(pca)

plot(pca, main="Quick scree plot")



## Variance captured per PC 
pca.var <- pca$sdev^2

## Percent variance - more informative visually 
pca.var.per <- round(pca.var/sum(pca.var)*100, 1)
pca.var.per

barplot(pca.var.per, main="Scree Plot", 
        names.arg = paste0("PC", 1:10),
        xlab="Principal Component", ylab="Percent Variation")



## A vector of colors for wt and ko samples
colvec <- colnames(rna.data)
colvec[grep("wt", colvec)] <- "red"
colvec[grep("ko", colvec)] <- "blue"

plot(pca$x[,1], pca$x[,2], col=colvec, pch=16,
     xlab=paste0("PC1 (", pca.var.per[1], "%)"),
     ylab=paste0("PC2 (", pca.var.per[2], "%)"))

text(pca$x[,1], pca$x[,2], labels = colnames(rna.data), pos=c(rep(4,5), rep(2,5)))


library(ggplot2)

df <- as.data.frame(pca$x)

# basic plot
ggplot(df) + 
  aes(PC1, PC2) + 
  geom_point()



# Add a 'wt' and 'ko' "condition" column
df$samples <- colnames(rna.data) 
df$condition <- substr(colnames(rna.data),1,2)

p <- ggplot(df) + 
        aes(PC1, PC2, label=samples, col=condition) + 
        geom_label(show.legend = FALSE)


p + labs(title="PCA of RNASeq Data",
       subtitle = "PC1 clealy seperates wild-type from knock-out samples",
       x=paste0("PC1 (", pca.var.per[1], "%)"),
       y=paste0("PC2 (", pca.var.per[2], "%)"),
       caption="Class example data") +
     theme_bw()




loading_scores <- pca$rotation[,1]

## Find the top 10 measurements (genes) that contribute
## most to PC1 in either direction (+ or -)
gene_scores <- abs(loading_scores) 
gene_score_ranked <- sort(gene_scores, decreasing=TRUE)

## show the names of the top 10 genes
top_10_genes <- names(gene_score_ranked[1:10])
top_10_genes 




```

